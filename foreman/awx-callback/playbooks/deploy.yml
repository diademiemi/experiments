---
###
# This play removes the hostnames to /etc/hosts when the tag "hosts" is used in combination with "reset" or "cleanup"
###
- name: Remove hostnames from /etc/hosts
  tags: hosts, never
  hosts: all, localhost
  gather_facts: false
  tasks:
    - name: Remove hostname entries
      ignore_errors: true
      block:
        - name: Don't remove hostnames when reset or cleanup is not used
          ansible.builtin.meta: end_play
          when:
            - "'reset' not in ansible_run_tags | default([]) and 'cleanup' not in ansible_run_tags | default([])"
          delegate_to: localhost
          run_once: true

        - name: Gather facts
          ansible.builtin.setup:
          when: inventory_hostname != 'localhost'

        - name: Prompt for sudo password
          tags: sudo
          ansible.builtin.pause:
            prompt: "Enter sudo password to add hostnames to /etc/hosts"
            echo: false
          delegate_to: localhost
          run_once: true
          register: sudo_pass

        - name: Set sudo password
          tags: sudo
          ansible.builtin.set_fact:
            ansible_become_password: "{{ sudo_pass.user_input }}"
          delegate_to: localhost
          delegate_facts: true
          run_once: true
          when: sudo_pass is defined

        - name: Remove device hostnames from localhost /etc/hosts
          become: true
          ansible.builtin.lineinfile:
            path: /etc/hosts
            line: "{{ hostvars[item].ansible_default_ipv4.address }} {{ hostvars[item].inventory_hostname }} {{ hostvars[item].ansible_fqdn }}"
            regexp: "^{{ hostvars[item].ansible_default_ipv4.address }}.*$"
            state: absent
          delegate_to: localhost
          run_once: true
          loop: "{{ ansible_play_hosts }}"
          ignore_errors: true
          when:
            - sudo_pass.user_input is defined
            - hostvars[item].inventory_hostname != 'localhost'

###
# This play deploys or removes the VMs
# Tag "reset" removes the VMs and creates them again
# Tag "cleanup" removes the VMs and aborts the play
###
- name: Deploy Terraform project
  hosts: localhost
  tasks:
    - name: Remove VMs
      tags: terraform, reset, cleanup, never
      cloud.terraform.terraform:
        project_path: "{{ lookup('env', 'PWD') }}/terraform"
        state: absent
        force_init: true
        variables_files:
          - "{{ lookup('env', 'PWD') }}/terraform/vars/vars.tfvars"
      register: terraform

    - name: Refresh inventory
      tags: terraform, inventory, reset, cleanup, never
      ansible.builtin.meta: refresh_inventory

    - name: Abort run
      tags: never, cleanup
      ansible.builtin.meta: end_host

    - name: Create VMs
      tags: terraform, create, always
      cloud.terraform.terraform:
        project_path: "{{ lookup('env', 'PWD') }}/terraform"
        state: present
        force_init: true
        variables_files:
          - "{{ lookup('env', 'PWD') }}/terraform/vars/vars.tfvars"
      register: terraform

    - name: Refresh inventory
      tags: terraform, inventory, always
      ansible.builtin.meta: refresh_inventory

###
# This play adds the hostnames to /etc/hosts when the tag "hosts" is used
###
- name: Verify connection
  hosts: all, localhost
  gather_facts: false
  tasks:
    - name: Wait for SSH
      tags: terraform, ssh, always
      ansible.builtin.wait_for_connection:
        delay: 5
        timeout: 300
      when: inventory_hostname != 'localhost'

    - name: Gather facts
      tags: terraform, hosts, facts, always
      ansible.builtin.setup:
      when: inventory_hostname != 'localhost'

    - name: Add hostname entries
      tags: terraform, hosts, never
      ignore_errors: true
      block:
        - name: Prompt for sudo password
          tags: sudo
          ansible.builtin.pause:
            prompt: "Enter sudo password to add hostnames to /etc/hosts"
            echo: false
          delegate_to: localhost
          run_once: true
          register: sudo_pass
          when: ansible_become_password is not defined

        - name: Set sudo password
          tags: sudo
          ansible.builtin.set_fact:
            ansible_become_password: "{{ sudo_pass.user_input }}"
          delegate_to: localhost
          delegate_facts: true
          run_once: true
          when: sudo_pass is defined and ansible_become_password is not defined

        - name: Add device hostnames to localhost /etc/hosts
          become: true
          ansible.builtin.lineinfile:
            path: /etc/hosts
            line: "{{ hostvars[item].ansible_default_ipv4.address }} {{ hostvars[item].inventory_hostname }} {{ hostvars[item].ansible_fqdn }}"
            regexp: "^{{ hostvars[item].ansible_default_ipv4.address }}.*$"
            state: present
          delegate_to: localhost
          run_once: true
          loop: "{{ ansible_play_hosts }}"
          ignore_errors: true
          when:
            - hostvars[item].inventory_hostname != 'localhost'

###
# The plays below deploy the various components
###

- name: Install AWX
  tags: awx, always
  ansible.builtin.import_playbook: awx/deploy.yml

- name: Install Foreman
  tags: foreman, always
  ansible.builtin.import_playbook: foreman/deploy.yml

...
